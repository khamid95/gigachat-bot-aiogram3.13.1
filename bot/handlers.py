import logging
from aiogram import Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from bot.services import GigaChatService
from typing import Optional

logger = logging.getLogger(__name__)

class TelegramHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ Telegram"""
    def __init__(self, bot: Bot, gigachat_service: GigaChatService, start_message: str):
        self.bot = bot
        self.gigachat_service = gigachat_service
        self.start_message = start_message
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        self.keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    async def cmd_start(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or 'Anonymous'
            await self.gigachat_service.reset_user_tokens(user_id, username)
            await message.answer(self.start_message, reply_markup=self.keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def reset_dialog(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥'"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or 'Anonymous'
            await self.gigachat_service.reset_user_tokens(user_id, username)
            await message.answer("üîÅ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=self.keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_dialog –¥–ª—è user_id={user_id}: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def ai_dialog(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å GigaChat"""
        if not message.text:
            return

        wait_message = None
        try:
            user_id = message.from_user.id
            username = message.from_user.username or 'Anonymous'
            user_message = message.text

            wait_message = await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç...")
            response, success = await self.gigachat_service.process_message(user_id, username, user_message)
            
            await self.gigachat_service.delete_wait_message(message, wait_message)
            await message.answer(response, reply_markup=self.keyboard)
            
            if success:
                await self.gigachat_service.notify_low_tokens(user_id, message.chat.id)
            else:
                await message.answer("üîÅ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç –∑–∞–Ω–æ–≤–æ.", reply_markup=self.keyboard)

        except Exception as e:
            await self.gigachat_service.delete_wait_message(message, wait_message)
            if "rate limit exceeded" in str(e).lower():
                await message.answer("–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ GigaChat –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=self.keyboard)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_dialog –¥–ª—è {user_id}: {e}")
                if not str(e).startswith("Telegram server says - Bad Request: message to delete not found"):
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=self.keyboard)
